// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id              Int       @id @default(autoincrement())
    username        String    @unique
    password        String
    userType        UserType
    cart            Cart?
    shippingAddress Address[]
    profile         Profile?
    //
    deletedFlg      Boolean   @default(false)
    deletedAt       DateTime?
    createdBy       Int?
    createdAt       DateTime  @default(now())
    updatedBy       Int?
    updatedAt       DateTime  @updatedAt
    metadata        Json?
}

model Avatar {
    id         Int       @id @default(autoincrement())
    url        String
    profile    Profile   @relation(fields: [profileId], references: [id])
    profileId  Int       @unique
    //
    deletedFlg Boolean   @default(false)
    deletedAt  DateTime?
    createdBy  Int?
    createdAt  DateTime  @default(now())
    updatedBy  Int?
    updatedAt  DateTime  @updatedAt
    metadata   Json?
}

model Profile {
    id          Int       @id @default(autoincrement())
    firstName   String
    lastName    String
    gender      Gender    @default(UNKNOWN)
    email       String?   @unique
    phoneNumber String?
    address     String?
    avatar      Avatar?
    userId      Int       @unique
    user        User      @relation(fields: [userId], references: [id])
    // 
    deletedFlg  Boolean   @default(false)
    deletedAt   DateTime?
    createdBy   Int?
    createdAt   DateTime  @default(now())
    updatedBy   Int?
    updatedAt   DateTime  @updatedAt
    metadata    Json?
}

model Address {
    id            Int       @id @default(autoincrement())
    userId        Int
    user          User      @relation(fields: [userId], references: [id])
    street        String?
    city          String?
    state         String?
    postalCode    String?
    detailAddress String?
    metadata      Json?
    deletedFlg    Boolean   @default(false)
    deletedAt     DateTime?
    createdBy     Int?
    createdAt     DateTime  @default(now())
    updatedBy     Int?
    updatedAt     DateTime  @updatedAt
}

model Cart {
    id         Int        @id @default(autoincrement())
    userId     Int        @unique
    user       User       @relation(fields: [userId], references: [id])
    cartItems  CartItem[]
    // 
    deletedFlg Boolean    @default(false)
    deletedAt  DateTime?
    createdBy  Int?
    createdAt  DateTime   @default(now())
    updatedBy  Int?
    updatedAt  DateTime   @updatedAt
    metadata   Json?
}

model CartItem {
    id         Int            @id @default(autoincrement())
    cartId     Int
    productId  Int
    variantId  Int
    quantity   Int
    cart       Cart           @relation(fields: [cartId], references: [id])
    product    Product        @relation(fields: [productId], references: [id])
    variant    ProductVariant @relation(fields: [variantId], references: [id])
    metadata   Json?
    deletedFlg Boolean        @default(false)
    deletedAt  DateTime?
    createdBy  Int?
    createdAt  DateTime       @default(now())
    updatedBy  Int?
    updatedAt  DateTime       @updatedAt
}

model Category {
    id           Int        @id @default(autoincrement())
    name         String
    description  String?
    products     Product[]
    parentId     Int
    parent       Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
    children     Category[] @relation("CategoryToParent")
    introduction String?
    metadata     Json?
    // 
    deletedFlg   Boolean    @default(false)
    deletedAt    DateTime?
    createdBy    Int?
    createdAt    DateTime   @default(now())
    updatedBy    Int?
    updatedAt    DateTime   @updatedAt
}

model Product {
    id          Int              @id @default(autoincrement())
    name        String
    description String
    price       Float
    categoryId  Int
    category    Category         @relation(fields: [categoryId], references: [id])
    variants    ProductVariant[]
    images      ProductImage[]
    CartItem    CartItem[]
    //
    deletedFlg  Boolean          @default(false)
    deletedAt   DateTime?
    createdBy   Int?
    createdAt   DateTime         @default(now())
    updatedBy   Int?
    updatedAt   DateTime         @updatedAt
    metadata    Json?
}

model Color {
    id         Int              @id @default(autoincrement())
    name       String
    variants   ProductVariant[]
    metadata   Json?
    deletedFlg Boolean          @default(false)
    deletedAt  DateTime?
    createdBy  Int?
    createdAt  DateTime         @default(now())
    updatedBy  Int?
    updatedAt  DateTime         @updatedAt
}

model Size {
    id         Int              @id @default(autoincrement())
    name       String
    variants   ProductVariant[]
    metadata   Json?
    deletedFlg Boolean          @default(false)
    deletedAt  DateTime?
    createdBy  Int?
    createdAt  DateTime         @default(now())
    updatedBy  Int?
    updatedAt  DateTime         @updatedAt
}

model ProductVariant {
    id         Int        @id @default(autoincrement())
    productId  Int
    colorId    Int
    sizeId     Int
    stock      Int
    product    Product    @relation(fields: [productId], references: [id])
    color      Color      @relation(fields: [colorId], references: [id])
    size       Size       @relation(fields: [sizeId], references: [id])
    CartItem   CartItem[]
    metadata   Json?
    deletedFlg Boolean    @default(false)
    deletedAt  DateTime?
    createdBy  Int?
    createdAt  DateTime   @default(now())
    updatedBy  Int?
    updatedAt  DateTime   @updatedAt
}

model ProductImage {
    id         Int       @id @default(autoincrement())
    productId  Int
    imageUrl   String
    product    Product   @relation(fields: [productId], references: [id])
    metadata   Json?
    deletedFlg Boolean   @default(false)
    deletedAt  DateTime?
    createdBy  Int?
    createdAt  DateTime  @default(now())
    updatedBy  Int?
    updatedAt  DateTime  @updatedAt
}

enum UserType {
    CUSTOMER
    ADMIN
}

enum Gender {
    MALE
    FEMALE
    NONBINARY
    UNKNOWN
}
